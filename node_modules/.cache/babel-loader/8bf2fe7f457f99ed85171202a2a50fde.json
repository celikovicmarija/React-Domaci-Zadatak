{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Marija\\\\react-weather\\\\src\\\\components\\\\Weather.js\";\nimport React from \"react\";\nimport AppLayout from \"./AppLayout\";\nimport WeatherSearch from \"./WeatherSearch\";\nimport * as weatherIcons from \"../data/icons.json\";\nimport * as recommendations from \"../data/recommendations.json\";\nexport default function Weather(props) {\n  const {\n    city,\n    currentWeather,\n    forecast,\n    onCityChange,\n    error\n  } = props;\n\n  if (currentWeather && forecast) {\n    const now = new Date(); // Convert to UTC Date\n\n    const date = new Date(now.getTime() + now.getTimezoneOffset() * 60000);\n    const prefix = \"wi wi-\";\n    const sunrise = new Date(currentWeather.sunrise);\n    const sunset = new Date(currentWeather.sunset);\n    const timeOfDay = date > sunrise && date < sunset ? \"day\" : \"night\";\n    const icon = prefix + weatherIcons.default[timeOfDay][currentWeather.icon_id].icon;\n    const recommendation = recommendations.default[timeOfDay][currentWeather.icon_id].recommendation;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 25,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(WeatherSearch, {\n      city: city,\n      onCityChange: onCityChange,\n      error: error,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 26,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(AppLayout, {\n      currentWeather: currentWeather,\n      forecast: forecast,\n      icon: icon,\n      recommendation: recommendation,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 9\n      }\n    }));\n  }\n}","map":{"version":3,"sources":["C:/Users/Marija/react-weather/src/components/Weather.js"],"names":["React","AppLayout","WeatherSearch","weatherIcons","recommendations","Weather","props","city","currentWeather","forecast","onCityChange","error","now","Date","date","getTime","getTimezoneOffset","prefix","sunrise","sunset","timeOfDay","icon","default","icon_id","recommendation"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,OAAOC,SAAP,MAAsB,aAAtB;AACA,OAAOC,aAAP,MAA0B,iBAA1B;AAEA,OAAO,KAAKC,YAAZ,MAA8B,oBAA9B;AACA,OAAO,KAAKC,eAAZ,MAAiC,8BAAjC;AAEA,eAAe,SAASC,OAAT,CAAiBC,KAAjB,EAAwB;AACrC,QAAM;AAAEC,IAAAA,IAAF;AAAQC,IAAAA,cAAR;AAAwBC,IAAAA,QAAxB;AAAkCC,IAAAA,YAAlC;AAAgDC,IAAAA;AAAhD,MAA0DL,KAAhE;;AACA,MAAIE,cAAc,IAAIC,QAAtB,EAAgC;AAC9B,UAAMG,GAAG,GAAG,IAAIC,IAAJ,EAAZ,CAD8B,CAE9B;;AACA,UAAMC,IAAI,GAAG,IAAID,IAAJ,CAASD,GAAG,CAACG,OAAJ,KAAgBH,GAAG,CAACI,iBAAJ,KAA0B,KAAnD,CAAb;AACA,UAAMC,MAAM,GAAG,QAAf;AACA,UAAMC,OAAO,GAAG,IAAIL,IAAJ,CAASL,cAAc,CAACU,OAAxB,CAAhB;AACA,UAAMC,MAAM,GAAG,IAAIN,IAAJ,CAASL,cAAc,CAACW,MAAxB,CAAf;AACA,UAAMC,SAAS,GAAGN,IAAI,GAAGI,OAAP,IAAkBJ,IAAI,GAAGK,MAAzB,GAAkC,KAAlC,GAA0C,OAA5D;AACA,UAAME,IAAI,GACRJ,MAAM,GAAGd,YAAY,CAACmB,OAAb,CAAqBF,SAArB,EAAgCZ,cAAc,CAACe,OAA/C,EAAwDF,IADnE;AAEA,UAAMG,cAAc,GAClBpB,eAAe,CAACkB,OAAhB,CAAwBF,SAAxB,EAAmCZ,cAAc,CAACe,OAAlD,EAA2DC,cAD7D;AAGA,wBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE,oBAAC,aAAD;AAAe,MAAA,IAAI,EAAEjB,IAArB;AAA2B,MAAA,YAAY,EAAEG,YAAzC;AAAuD,MAAA,KAAK,EAAEC,KAA9D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,eAEE,oBAAC,SAAD;AACE,MAAA,cAAc,EAAEH,cADlB;AAEE,MAAA,QAAQ,EAAEC,QAFZ;AAGE,MAAA,IAAI,EAAEY,IAHR;AAIE,MAAA,cAAc,EAAEG,cAJlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFF,CADF;AAWD;AACF","sourcesContent":["import React from \"react\";\r\n\r\nimport AppLayout from \"./AppLayout\";\r\nimport WeatherSearch from \"./WeatherSearch\";\r\n\r\nimport * as weatherIcons from \"../data/icons.json\";\r\nimport * as recommendations from \"../data/recommendations.json\";\r\n\r\nexport default function Weather(props) {\r\n  const { city, currentWeather, forecast, onCityChange, error } = props;\r\n  if (currentWeather && forecast) {\r\n    const now = new Date();\r\n    // Convert to UTC Date\r\n    const date = new Date(now.getTime() + now.getTimezoneOffset() * 60000);\r\n    const prefix = \"wi wi-\";\r\n    const sunrise = new Date(currentWeather.sunrise);\r\n    const sunset = new Date(currentWeather.sunset);\r\n    const timeOfDay = date > sunrise && date < sunset ? \"day\" : \"night\";\r\n    const icon =\r\n      prefix + weatherIcons.default[timeOfDay][currentWeather.icon_id].icon;\r\n    const recommendation =\r\n      recommendations.default[timeOfDay][currentWeather.icon_id].recommendation;\r\n\r\n    return (\r\n      <div>\r\n        <WeatherSearch city={city} onCityChange={onCityChange} error={error} />\r\n        <AppLayout\r\n          currentWeather={currentWeather}\r\n          forecast={forecast}\r\n          icon={icon}\r\n          recommendation={recommendation}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}