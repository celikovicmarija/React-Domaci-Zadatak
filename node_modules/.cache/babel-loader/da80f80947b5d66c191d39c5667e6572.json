{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Marija\\\\react-weather\\\\src\\\\components\\\\App.js\";\nimport React, { useEffect, useState } from \"react\";\nimport { createMuiTheme, Container, ThemeProvider } from \"@material-ui/core\";\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\nimport Weather from \"./Weather\";\nimport NavBar from \"./NavBar\";\nimport Footer from \"./Footer\";\nimport \"../css/App.css\";\nexport default function App() {\n  const [city, setCity] = useState(\"Belgrade\");\n  const [error, setError] = useState(null);\n  const [systemMetric, setSystemMetric] = useState(true);\n  const [currentWeather, setCurrentWeather] = useState({});\n  const [forecast, setForecast] = useState([]);\n  useEffect(() => {\n    getWeather(city).then(weather => {\n      setCurrentWeather(weather);\n      setError(null);\n    }).catch(err => {\n      setError(err.message);\n    });\n  }, [city, error]);\n  useEffect(() => {\n    getForecast(city).then(data => {\n      setForecast(data);\n      setError(null);\n    }).catch(err => {\n      setError(err.message);\n    });\n  }, [city, error]);\n\n  const handleCityChange = city => {\n    setCity(city);\n  };\n\n  const handleSystemMetricChange = systemMetric => {\n    setSystemMetric(systemMetric);\n  };\n\n  const theme = createMuiTheme({\n    typography: {\n      fontFamily: [\"Inter\", \"-apple-system\", \"BlinkMacSystemFont\", '\"Helvetica Neue\"', \"Arial\", \"sans-serif\", '\"Apple Color Emoji\"', '\"Segoe UI Emoji\"', '\"Segoe UI Symbol\"'].join(\",\"),\n      fontSize: 14,\n      h5: {\n        fontWeight: 600\n      }\n    }\n  });\n\n  if (currentWeather && Object.keys(currentWeather).length || forecast && Object.keys(forecast).length) {\n    return /*#__PURE__*/React.createElement(ThemeProvider, {\n      theme: theme,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(CssBaseline, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(NavBar, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(Container, {\n      maxWidth: \"sm\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(Weather, {\n      city: city,\n      currentWeather: currentWeather,\n      forecast: forecast,\n      onCityChange: handleCityChange,\n      error: error,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 11\n      }\n    })), /*#__PURE__*/React.createElement(Footer, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 9\n      }\n    }));\n  } else {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(CircularProgress, {\n      color: error ? \"secondary\" : \"primary\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 9\n      }\n    }), error ? /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 18\n      }\n    }, error) : \"\");\n  }\n}\n\nfunction handleResponse(response) {\n  if (response.ok) {\n    return response.json();\n  } else {\n    throw new Error(\"Error: Location \" + response.statusText.toLowerCase());\n  }\n}\n\nfunction getWeather(city) {\n  return fetch(`${process.env.REACT_APP_API_URL}/weather/?q=${city}&units=metric&APPID=${process.env.REACT_APP_API_KEY}`).then(res => handleResponse(res)).then(weather => {\n    if (Object.entries(weather).length) {\n      const mappedData = mapDataToWeatherInterface(weather);\n      return mappedData;\n    }\n  });\n}\n\nfunction getForecast(city) {\n  return fetch(`${process.env.REACT_APP_API_URL}/forecast/?q=${city}&units=metric&APPID=${process.env.REACT_APP_API_KEY}`).then(res => handleResponse(res)).then(forecastData => {\n    if (Object.entries(forecastData).length) {\n      return forecastData.list.filter(forecast => forecast.dt_txt.match(/09:00:00/)).map(mapDataToWeatherInterface);\n    }\n  });\n}\n\nfunction mapDataToWeatherInterface(data) {\n  const mapped = {\n    city: data.name,\n    condition: data.cod,\n    country: data.sys.country,\n    date: data.dt * 1000,\n    description: data.weather[0].description,\n    feels_like: Math.round(data.main.feels_like),\n    humidity: data.main.humidity,\n    icon_id: data.weather[0].id,\n    sunrise: data.sys.sunrise * 1000,\n    sunset: data.sys.sunset * 1000,\n    temperature: Math.round(data.main.temp),\n    timezone: data.timezone / 60,\n    wind_speed: Math.round(data.wind.speed * 3.6) // convert from m/s to km/h\n\n  }; // Add extra properties for the five day forecast: dt_txt, icon, min, max\n\n  if (data.dt_txt) {\n    mapped.dt_txt = data.dt_txt;\n  }\n\n  if (data.weather[0].icon) {\n    mapped.icon = data.weather[0].icon;\n  }\n\n  if (data.main.temp_min && data.main.temp_max) {\n    mapped.max = Math.round(data.main.temp_max);\n    mapped.min = Math.round(data.main.temp_min);\n  } // remove undefined fields\n\n\n  Object.entries(mapped).map(([key, value]) => value === undefined && delete mapped[key]);\n  return mapped;\n}","map":{"version":3,"sources":["C:/Users/Marija/react-weather/src/components/App.js"],"names":["React","useEffect","useState","createMuiTheme","Container","ThemeProvider","CircularProgress","CssBaseline","Weather","NavBar","Footer","App","city","setCity","error","setError","systemMetric","setSystemMetric","currentWeather","setCurrentWeather","forecast","setForecast","getWeather","then","weather","catch","err","message","getForecast","data","handleCityChange","handleSystemMetricChange","theme","typography","fontFamily","join","fontSize","h5","fontWeight","Object","keys","length","handleResponse","response","ok","json","Error","statusText","toLowerCase","fetch","process","env","REACT_APP_API_URL","REACT_APP_API_KEY","res","entries","mappedData","mapDataToWeatherInterface","forecastData","list","filter","dt_txt","match","map","mapped","name","condition","cod","country","sys","date","dt","description","feels_like","Math","round","main","humidity","icon_id","id","sunrise","sunset","temperature","temp","timezone","wind_speed","wind","speed","icon","temp_min","temp_max","max","min","key","value","undefined"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport { createMuiTheme, Container, ThemeProvider } from \"@material-ui/core\";\r\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\r\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\r\n\r\nimport Weather from \"./Weather\";\r\nimport NavBar from \"./NavBar\";\r\nimport Footer from \"./Footer\";\r\nimport \"../css/App.css\";\r\nexport default function App() {\r\n  const [city, setCity] = useState(\"Belgrade\");\r\n  const [error, setError] = useState(null);\r\n  const [systemMetric, setSystemMetric] = useState(true);\r\n  const [currentWeather, setCurrentWeather] = useState({});\r\n  const [forecast, setForecast] = useState([]);\r\n\r\n  useEffect(() => {\r\n    getWeather(city)\r\n      .then(weather => {\r\n        setCurrentWeather(weather);\r\n        setError(null);\r\n      })\r\n      .catch(err => {\r\n        setError(err.message);\r\n      });\r\n  }, [city, error]);\r\n\r\n  useEffect(() => {\r\n    getForecast(city)\r\n      .then(data => {\r\n        setForecast(data);\r\n        setError(null);\r\n      })\r\n      .catch(err => {\r\n        setError(err.message);\r\n      });\r\n  }, [city, error]);\r\n\r\n  const handleCityChange = city => {\r\n    setCity(city);\r\n  };\r\n  const handleSystemMetricChange = systemMetric => {\r\n    setSystemMetric(systemMetric);\r\n  };\r\n\r\n  const theme = createMuiTheme({\r\n    typography: {\r\n      fontFamily: [\r\n        \"Inter\",\r\n        \"-apple-system\",\r\n        \"BlinkMacSystemFont\",\r\n        '\"Helvetica Neue\"',\r\n        \"Arial\",\r\n        \"sans-serif\",\r\n        '\"Apple Color Emoji\"',\r\n        '\"Segoe UI Emoji\"',\r\n        '\"Segoe UI Symbol\"'\r\n      ].join(\",\"),\r\n      fontSize: 14,\r\n      h5: {\r\n        fontWeight: 600\r\n      }\r\n    }\r\n  });\r\n\r\n  if (\r\n    (currentWeather && Object.keys(currentWeather).length) ||\r\n    (forecast && Object.keys(forecast).length)\r\n  ) {\r\n    return (\r\n      <ThemeProvider theme={theme}>\r\n        <CssBaseline />\r\n        <NavBar />\r\n        <Container maxWidth=\"sm\">\r\n          <Weather\r\n            city={city}\r\n            currentWeather={currentWeather}\r\n            forecast={forecast}\r\n            onCityChange={handleCityChange}\r\n            error={error}\r\n          />\r\n        </Container>\r\n        <Footer/>\r\n      </ThemeProvider>\r\n    );\r\n  } else {\r\n    return (\r\n      <div>\r\n        <CircularProgress color={error ? \"secondary\" : \"primary\"} />\r\n        {error ? <p>{error}</p> : \"\"}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nfunction handleResponse(response) {\r\n  if (response.ok) {\r\n    return response.json();\r\n  } else {\r\n    throw new Error(\"Error: Location \" + response.statusText.toLowerCase());\r\n  }\r\n}\r\n\r\nfunction getWeather(city) {\r\n  return fetch(\r\n    `${process.env.REACT_APP_API_URL}/weather/?q=${city}&units=metric&APPID=${process.env.REACT_APP_API_KEY}`\r\n  )\r\n    .then(res => handleResponse(res))\r\n    .then(weather => {\r\n      if (Object.entries(weather).length) {\r\n        const mappedData = mapDataToWeatherInterface(weather);\r\n        return mappedData;\r\n      }\r\n    });\r\n}\r\n\r\nfunction getForecast(city) {\r\n  return fetch(\r\n    `${process.env.REACT_APP_API_URL}/forecast/?q=${city}&units=metric&APPID=${process.env.REACT_APP_API_KEY}`\r\n  )\r\n    .then(res => handleResponse(res))\r\n    .then(forecastData => {\r\n      if (Object.entries(forecastData).length) {\r\n        return forecastData.list\r\n          .filter(forecast => forecast.dt_txt.match(/09:00:00/))\r\n          .map(mapDataToWeatherInterface);\r\n      }\r\n    });\r\n}\r\n\r\nfunction mapDataToWeatherInterface(data) {\r\n  const mapped = {\r\n    city: data.name,\r\n    condition: data.cod,\r\n    country: data.sys.country,\r\n    date: data.dt * 1000,\r\n    description: data.weather[0].description,\r\n    feels_like: Math.round(data.main.feels_like),\r\n    humidity: data.main.humidity,\r\n    icon_id: data.weather[0].id,\r\n    sunrise: data.sys.sunrise * 1000,\r\n    sunset: data.sys.sunset * 1000,\r\n    temperature: Math.round(data.main.temp),\r\n    timezone: data.timezone / 60,\r\n    wind_speed: Math.round(data.wind.speed * 3.6) // convert from m/s to km/h\r\n  };\r\n\r\n  // Add extra properties for the five day forecast: dt_txt, icon, min, max\r\n  if (data.dt_txt) {\r\n    mapped.dt_txt = data.dt_txt;\r\n  }\r\n\r\n  if (data.weather[0].icon) {\r\n    mapped.icon = data.weather[0].icon;\r\n  }\r\n\r\n  if (data.main.temp_min && data.main.temp_max) {\r\n    mapped.max = Math.round(data.main.temp_max);\r\n    mapped.min = Math.round(data.main.temp_min);\r\n  }\r\n\r\n  // remove undefined fields\r\n  Object.entries(mapped).map(\r\n    ([key, value]) => value === undefined && delete mapped[key]\r\n  );\r\n\r\n  return mapped;\r\n}\r\n"]},"metadata":{},"sourceType":"module"}